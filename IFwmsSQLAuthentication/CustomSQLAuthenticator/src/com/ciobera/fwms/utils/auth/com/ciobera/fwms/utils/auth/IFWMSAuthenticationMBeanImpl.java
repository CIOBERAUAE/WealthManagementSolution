




/*
 * This is a generated file. Do not edit this file.
 */
package com.ciobera.fwms.utils.auth;

import java.util.*;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.zip.CRC32;
import weblogic.descriptor.*;
import weblogic.descriptor.BeanUpdateEvent.PropertyUpdate;
import weblogic.descriptor.internal.*;
import weblogic.descriptor.internal.ReferenceManager.Resolver;
import weblogic.descriptor.beangen.LegalChecks;
import weblogic.descriptor.beangen.StringHelper;
import weblogic.utils.ArrayUtils;
import weblogic.utils.StringUtils;
import weblogic.utils.Debug;
import weblogic.utils.collections.ArrayIterator;
import weblogic.utils.collections.CombinedIterator;
import weblogic.descriptor.internal.Munger.ReaderEventInfo;

import weblogic.management.commo.RequiredModelMBeanWrapper;


/**
 * Corresponds to IFWMSAuthenticationMBean
 * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean)
 * @author Copyright (c) 2003,2014, Oracle and/or its affiliates. All rights reserved.
 * @version 0.1
 *
 * No description provided.
 *
 * @xsdgen:complexType.typeName ifwms-authenticationType
 * @xsdgen:complexType.targetNamespace http://xmlns.oracle.com/weblogic/security/extension
 * @xsdgen:complexType.rootElement ifwms-authentication
 */
public class IFWMSAuthenticationMBeanImpl
  extends weblogic.management.security.authentication.AuthenticatorMBeanImpl
  implements IFWMSAuthenticationMBean, java.io.Serializable
{
  private String _CompatibilityObjectName;
  private String _DbAuthPassword;
  private String _DbAuthUrl;
  private String _DbAuthUsername;
  private String _Description;
  private String _Name;
  private String _ProviderClassName;
  private weblogic.management.security.RealmMBean _Realm;
  private String _Version;
  private transient IFWMSAuthenticationImpl _customizer;


  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=IFWMSAuthenticationMBeanImpl)
   *
   */
  public IFWMSAuthenticationMBeanImpl() {
    super();
    _initializeRootBean(getDescriptor());
    try {
      _customizer = new com.ciobera.fwms.utils.auth.IFWMSAuthenticationImpl(new RequiredModelMBeanWrapper(this));
    } catch (Exception e) {
      if (e instanceof RuntimeException)
        throw (RuntimeException)e;
      throw new java.lang.reflect.UndeclaredThrowableException(e);
    }
    _initializeProperty(-1);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=IFWMSAuthenticationMBeanImpl)
   *
   */
  public IFWMSAuthenticationMBeanImpl(weblogic.descriptor.DescriptorBean param0, int param1) {
    super(param0, param1);
    _initializeRootBean(getDescriptor());
    try {
      _customizer = new com.ciobera.fwms.utils.auth.IFWMSAuthenticationImpl(new RequiredModelMBeanWrapper(this));
    } catch (Exception e) {
      if (e instanceof RuntimeException)
        throw (RuntimeException)e;
      throw new java.lang.reflect.UndeclaredThrowableException(e);
    }
    _initializeProperty(-1);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=IFWMSAuthenticationMBeanImpl)
   *
   */
  public IFWMSAuthenticationMBeanImpl(weblogic.descriptor.DescriptorBean param0, int param1, boolean param2) {
    super(param0, param1);
    _setTransient(param2);
    _initializeRootBean(getDescriptor());
    try {
      _customizer = new com.ciobera.fwms.utils.auth.IFWMSAuthenticationImpl(new RequiredModelMBeanWrapper(this));
    } catch (Exception e) {
      if (e instanceof RuntimeException)
        throw (RuntimeException)e;
      throw new java.lang.reflect.UndeclaredThrowableException(e);
    }
    _initializeProperty(-1);
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getProviderClassName)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getProviderClassName() {
    return _ProviderClassName;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isProviderClassNameInherited)
   *
   * return true if the value of property ProviderClassName is inherited from template
   */
  public boolean isProviderClassNameInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isProviderClassNameSet)
   *
   * @xsdgen:isSetMethodFor provider-class-name
   */
  public boolean isProviderClassNameSet() {
    return _isSet(2);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setProviderClassName)
   *
   */
  public void setProviderClassName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _ProviderClassName = param0;
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getDbAuthUrl)
   *
   * @xsdgen:element.name db-auth-url
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default jdbc:oracle:thin:@localhost:1521:orcl
   * @dynamic false
   */
  public String getDbAuthUrl() {
    return _DbAuthUrl;
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getDescription)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getDescription() {
    return _Description;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthUrlInherited)
   *
   * return true if the value of property DbAuthUrl is inherited from template
   */
  public boolean isDbAuthUrlInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthUrlSet)
   *
   * @xsdgen:isSetMethodFor db-auth-url
   */
  public boolean isDbAuthUrlSet() {
    return _isSet(9);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDescriptionInherited)
   *
   * return true if the value of property Description is inherited from template
   */
  public boolean isDescriptionInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDescriptionSet)
   *
   * @xsdgen:isSetMethodFor description
   */
  public boolean isDescriptionSet() {
    return _isSet(3);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setDescription)
   *
   */
  public void setDescription(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Description = param0;
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getVersion)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getVersion() {
    return _Version;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isVersionInherited)
   *
   * return true if the value of property Version is inherited from template
   */
  public boolean isVersionInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isVersionSet)
   *
   * @xsdgen:isSetMethodFor version
   */
  public boolean isVersionSet() {
    return _isSet(4);
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setDbAuthUrl)
   *
   */
  public void setDbAuthUrl(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    String _oldVal = _DbAuthUrl;
    _DbAuthUrl = param0;
    _postSet(9, _oldVal, param0);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setVersion)
   *
   */
  public void setVersion(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Version = param0;
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getDbAuthUsername)
   *
   * @xsdgen:element.name db-auth-username
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default hr
   * @dynamic false
   */
  public String getDbAuthUsername() {
    return _DbAuthUsername;
  }

  /**
   * Returns the realm that contains this security provider.
 Returns null if this security provider is not contained by a realm.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getRealm)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public weblogic.management.security.RealmMBean getRealm() {
    return _customizer.getRealm();
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthUsernameInherited)
   *
   * return true if the value of property DbAuthUsername is inherited from template
   */
  public boolean isDbAuthUsernameInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthUsernameSet)
   *
   * @xsdgen:isSetMethodFor db-auth-username
   */
  public boolean isDbAuthUsernameSet() {
    return _isSet(10);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isRealmInherited)
   *
   * return true if the value of property Realm is inherited from template
   */
  public boolean isRealmInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isRealmSet)
   *
   * @xsdgen:isSetMethodFor realm
   */
  public boolean isRealmSet() {
    return _isSet(5);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setRealm)
   *
   */
  public void setRealm(weblogic.management.security.RealmMBean param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Realm = param0;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getName)
   *
   * @xsdgen:element.name name
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default IFWMSAuthentication
   * @dynamic false
   */
  public String getName() {
    return _Name;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isNameInherited)
   *
   * return true if the value of property Name is inherited from template
   */
  public boolean isNameInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isNameSet)
   *
   * @xsdgen:isSetMethodFor name
   */
  public boolean isNameSet() {
    return _isSet(6);
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setDbAuthUsername)
   *
   */
  public void setDbAuthUsername(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    String _oldVal = _DbAuthUsername;
    _DbAuthUsername = param0;
    _postSet(10, _oldVal, param0);
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getDbAuthPassword)
   *
   * @xsdgen:element.name db-auth-password
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default hr
   * @dynamic false
   */
  public String getDbAuthPassword() {
    return _DbAuthPassword;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthPasswordInherited)
   *
   * return true if the value of property DbAuthPassword is inherited from template
   */
  public boolean isDbAuthPasswordInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isDbAuthPasswordSet)
   *
   * @xsdgen:isSetMethodFor db-auth-password
   */
  public boolean isDbAuthPasswordSet() {
    return _isSet(11);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setName)
   *
   */
  public void setName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? null : param0.trim();
    String _oldVal = _Name;
    _Name = param0;
    _postSet(6, _oldVal, param0);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=getCompatibilityObjectName)
   *
   * @xsdgen:element.name compatibility-object-name
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public String getCompatibilityObjectName() {
    return _customizer.getCompatibilityObjectName();
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isCompatibilityObjectNameInherited)
   *
   * return true if the value of property CompatibilityObjectName is inherited from template
   */
  public boolean isCompatibilityObjectNameInherited() {
    return false;
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=isCompatibilityObjectNameSet)
   *
   * @xsdgen:isSetMethodFor compatibility-object-name
   */
  public boolean isCompatibilityObjectNameSet() {
    return _isSet(7);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setCompatibilityObjectName)
   *
   */
  public void setCompatibilityObjectName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? null : param0.trim();
    String _oldVal = _CompatibilityObjectName;
    _CompatibilityObjectName = param0;
    _postSet(7, _oldVal, param0);
  }

  /**
   * No description provided.
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=setDbAuthPassword)
   *
   */
  public void setDbAuthPassword(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    String _oldVal = _DbAuthPassword;
    _DbAuthPassword = param0;
    _postSet(11, _oldVal, param0);
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=_getKey)
   *
   */
  public Object _getKey() {
    return super._getKey();
  }

  /**
   * 
   * (Interface=com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean Attribute=_validate)
   *
   */
  public void _validate()
    throws IllegalArgumentException
  {
    super._validate();
  }



 





  protected void _unSet(int idx) {
    if (!_initializeProperty(idx)) {
      super._unSet(idx);
    } else {
      _markSet(idx, false);
    }
  }


  /**
   * @return new instance of helper
   */
  protected AbstractDescriptorBeanHelper _createHelper() {
    return new Helper(this);
  }

  /**
   * @return true if any property is set
   */
  public boolean _isAnythingSet() {
    return super._isAnythingSet()
      ;
  }



  /**
   * @return true if property initialized, false idx refers to a property
   * handled by superclass
   */
  private boolean _initializeProperty(int idx) {
    boolean initOne = idx > -1;
    if (!initOne) {
      idx = 7;
    }
    try {
      switch (idx) {
      case 7:
        _CompatibilityObjectName = null;
        if (initOne) break;
      case 11:
        _DbAuthPassword = "hr";
        if (initOne) break;
      case 9:
        _DbAuthUrl = "jdbc:oracle:thin:@localhost:1521:orcl";
        if (initOne) break;
      case 10:
        _DbAuthUsername = "hr";
        if (initOne) break;
      case 3:
        _Description = "Authentication Provider";
        if (initOne) break;
      case 6:
        _Name = "IFWMSAuthentication";
        if (initOne) break;
      case 2:
        _ProviderClassName = "com.ciobera.fwms.utils.auth.db.IFWMSAuthenticationProviderImpl";
        if (initOne) break;
      case 5:
        _Realm = null;
        if (initOne) break;
      case 4:
        _Version = "1.0";
        if (initOne) break;
      default:
        if (initOne) return false;
      }
      return true;
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw (Error)new AssertionError("Impossible Exception").initCause(e);
    }
  }


  /**
   * This helper class contains methods that are used infrequently and
   * can be easily separated from the bean implementations.  It is loaded
   * on demand to minimize memory usage.
   *
   * @xsdgen:complexType.exclude
   */
  protected static class Helper
    extends weblogic.management.security.authentication.AuthenticatorMBeanImpl.Helper
  {
    private IFWMSAuthenticationMBeanImpl bean;

    protected Helper(IFWMSAuthenticationMBeanImpl bean) {
      super(bean);
      this.bean = bean;
    }

    /**
     * @return property name indexed by propIndex.
     */
    public String getPropertyName(int propIndex) {
      switch (propIndex) {
      case 7: return "CompatibilityObjectName";
      case 11: return "DbAuthPassword";
      case 9: return "DbAuthUrl";
      case 10: return "DbAuthUsername";
      case 3: return "Description";
      case 6: return "Name";
      case 2: return "ProviderClassName";
      case 5: return "Realm";
      case 4: return "Version";
      default: return super.getPropertyName(propIndex);
      }
    }


    /**
     * @return property index of propName.
     */
    public int getPropertyIndex(String propName) {
      if (false) return -1;
      else if (propName.equals("CompatibilityObjectName")) return 7;
      else if (propName.equals("DbAuthPassword")) return 11;
      else if (propName.equals("DbAuthUrl")) return 9;
      else if (propName.equals("DbAuthUsername")) return 10;
      else if (propName.equals("Description")) return 3;
      else if (propName.equals("Name")) return 6;
      else if (propName.equals("ProviderClassName")) return 2;
      else if (propName.equals("Realm")) return 5;
      else if (propName.equals("Version")) return 4;
      else return super.getPropertyIndex(propName);
    }

    /**
     * @return iterator over all children
     */
    public Iterator getChildren() {
      List iterators = new ArrayList();
      return new CombinedIterator(iterators);
    }

    /**
     * Compute hash value for version helper
     */
    protected long computeHashValue(CRC32 crc) {
      try {
        StringBuffer buf = new StringBuffer();
        long superValue = super.computeHashValue(crc);
        if (superValue != 0) {
          buf.append(String.valueOf(superValue));
        }

        long childValue = 0;
        if (bean.isCompatibilityObjectNameSet()){
          buf.append("CompatibilityObjectName");
          buf.append(String.valueOf(bean.getCompatibilityObjectName()));
        }
        if (bean.isDbAuthPasswordSet()){
          buf.append("DbAuthPassword");
          buf.append(String.valueOf(bean.getDbAuthPassword()));
        }
        if (bean.isDbAuthUrlSet()){
          buf.append("DbAuthUrl");
          buf.append(String.valueOf(bean.getDbAuthUrl()));
        }
        if (bean.isDbAuthUsernameSet()){
          buf.append("DbAuthUsername");
          buf.append(String.valueOf(bean.getDbAuthUsername()));
        }
        if (bean.isDescriptionSet()){
          buf.append("Description");
          buf.append(String.valueOf(bean.getDescription()));
        }
        if (bean.isNameSet()){
          buf.append("Name");
          buf.append(String.valueOf(bean.getName()));
        }
        if (bean.isProviderClassNameSet()){
          buf.append("ProviderClassName");
          buf.append(String.valueOf(bean.getProviderClassName()));
        }
        if (bean.isRealmSet()){
          buf.append("Realm");
          buf.append(String.valueOf(bean.getRealm()));
        }
        if (bean.isVersionSet()){
          buf.append("Version");
          buf.append(String.valueOf(bean.getVersion()));
        }
        crc.update(buf.toString().getBytes());
        return crc.getValue();
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }
    /**
     * Compute difference between this and other
     */
    protected void computeDiff(AbstractDescriptorBean other) {
      try {
        super.computeDiff(other);
      IFWMSAuthenticationMBeanImpl otherTyped = (IFWMSAuthenticationMBeanImpl)other;
      computeDiff("CompatibilityObjectName", bean.getCompatibilityObjectName(), otherTyped.getCompatibilityObjectName(), false);
      computeDiff("DbAuthPassword", bean.getDbAuthPassword(), otherTyped.getDbAuthPassword(), false);
      computeDiff("DbAuthUrl", bean.getDbAuthUrl(), otherTyped.getDbAuthUrl(), false);
      computeDiff("DbAuthUsername", bean.getDbAuthUsername(), otherTyped.getDbAuthUsername(), false);
      computeDiff("Name", bean.getName(), otherTyped.getName(), false);
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void applyPropertyUpdate(BeanUpdateEvent event, PropertyUpdate update) {
      try {
        IFWMSAuthenticationMBeanImpl original = (IFWMSAuthenticationMBeanImpl)event.getSourceBean();
        IFWMSAuthenticationMBeanImpl proposed = (IFWMSAuthenticationMBeanImpl)event.getProposedBean();
        String prop = update.getPropertyName();
        int type = update.getUpdateType();
        if (update.isDerivedUpdate()) {
          return;
        }
        if (prop.equals("CompatibilityObjectName")) {
          original._conditionalUnset(update.isUnsetUpdate(), 7);
        } else
        if (prop.equals("DbAuthPassword")) {
          original.setDbAuthPassword(proposed.getDbAuthPassword());
          original._conditionalUnset(update.isUnsetUpdate(), 11);
        } else
        if (prop.equals("DbAuthUrl")) {
          original.setDbAuthUrl(proposed.getDbAuthUrl());
          original._conditionalUnset(update.isUnsetUpdate(), 9);
        } else
        if (prop.equals("DbAuthUsername")) {
          original.setDbAuthUsername(proposed.getDbAuthUsername());
          original._conditionalUnset(update.isUnsetUpdate(), 10);
        } else
        if (prop.equals("Description")) {
        } else
        if (prop.equals("Name")) {
          original.setName(proposed.getName());
          original._conditionalUnset(update.isUnsetUpdate(), 6);
        } else
        if (prop.equals("ProviderClassName")) {
        } else
        if (prop.equals("Realm")) {
        } else
        if (prop.equals("Version")) {
        } else
        {
          super.applyPropertyUpdate(event, update);
        }
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected AbstractDescriptorBean finishCopy(
    AbstractDescriptorBean initialCopy, boolean includeObsolete, List excludeProps
    ) {
      Object o;
      try {
        IFWMSAuthenticationMBeanImpl copy = (IFWMSAuthenticationMBeanImpl)initialCopy;
        super.finishCopy(copy, includeObsolete, excludeProps);
        if ((excludeProps == null || !excludeProps.contains("CompatibilityObjectName")) && bean.isCompatibilityObjectNameSet()) {
        }
        if ((excludeProps == null || !excludeProps.contains("DbAuthPassword")) && bean.isDbAuthPasswordSet()) {
          copy.setDbAuthPassword((String)bean.getDbAuthPassword());
        }
        if ((excludeProps == null || !excludeProps.contains("DbAuthUrl")) && bean.isDbAuthUrlSet()) {
          copy.setDbAuthUrl((String)bean.getDbAuthUrl());
        }
        if ((excludeProps == null || !excludeProps.contains("DbAuthUsername")) && bean.isDbAuthUsernameSet()) {
          copy.setDbAuthUsername((String)bean.getDbAuthUsername());
        }
        if ((excludeProps == null || !excludeProps.contains("Name")) && bean.isNameSet()) {
          copy.setName((String)bean.getName());
        }
        return copy;
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void inferSubTree(Class clazz, Object annotation) {
    	super.inferSubTree(clazz, annotation);
    	Object currentAnnotation = null;
                      		inferSubTree(bean.getRealm(), clazz, annotation);
          }
  }


  // FIXME ec@weblogic.com 01-Feb-05 -- no longer used. Remove when ADB method is removed
  public weblogic.descriptor.internal.Munger.SchemaHelper _getSchemaHelper() {
    return null;
  }

  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public String _getElementName(int propIndex) {
    return _getSchemaHelper2().getElementName(propIndex);
  }


  protected String getTargetNamespace() {
    return "http://xmlns.oracle.com/weblogic/security/extension";
  }

  private static SchemaHelper2 _schemaHelper;
  public weblogic.descriptor.internal.SchemaHelper _getSchemaHelper2() {
    if (_schemaHelper == null)
	_schemaHelper = new SchemaHelper2();
    return _schemaHelper;
  }

   // new schema helper
  /**
   * @xsdgen:complexType.exclude
   */
  public static class SchemaHelper2
   extends weblogic.descriptor.internal.AbstractSchemaHelper2
   implements weblogic.descriptor.internal.SchemaHelper
  {
    public int getPropertyIndex(String s) {
      switch(s.length()) {
      case 25:
        if (false) return -1;
        else if (s.equals("compatibility-object-name"))
          return 7;
        break;
      case 16:
        if (false) return -1;
        else if (s.equals("db-auth-password"))
          return 11;
        else if (s.equals("db-auth-username"))
          return 10;
        break;
      case 11:
        if (false) return -1;
        else if (s.equals("db-auth-url"))
          return 9;
        else if (s.equals("description"))
          return 3;
        break;
      case 4:
        if (false) return -1;
        else if (s.equals("name"))
          return 6;
        break;
      case 19:
        if (false) return -1;
        else if (s.equals("provider-class-name"))
          return 2;
        break;
      case 5:
        if (false) return -1;
        else if (s.equals("realm"))
          return 5;
        break;
      case 7:
        if (false) return -1;
        else if (s.equals("version"))
          return 4;
        break;
      default:
        break;
      }
      return super.getPropertyIndex(s);
    }

    public weblogic.descriptor.internal.SchemaHelper getSchemaHelper(int propIndex) {
      switch(propIndex) {
      default:
        return super.getSchemaHelper(propIndex);
      }
    }


    public String getRootElementName() {
      return "ifwms-authenticationm";
    }

    public String getElementName(int propIndex) {
      switch (propIndex) {
        case 7: return "compatibility-object-name";
        case 11: return "db-auth-password";
        case 9: return "db-auth-url";
        case 10: return "db-auth-username";
        case 3: return "description";
        case 6: return "name";
        case 2: return "provider-class-name";
        case 5: return "realm";
        case 4: return "version";
        default: return super.getElementName(propIndex);
      }
    }






    public boolean isBean(int propIndex) {
      switch(propIndex) {
      default:
        return super.isBean(propIndex);
      }
    }










  }




  public String wls_getInterfaceClassName() {
    return "com.ciobera.fwms.utils.auth.IFWMSAuthenticationMBean"; 
  }

}
