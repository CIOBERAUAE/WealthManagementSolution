package com.ciobera.fwms.common.model.am;

import com.ciobera.fwms.common.model.am.common.CommonAM;
import com.ciobera.fwms.common.model.vo.readonly.FWMSSeqLoginVOImpl;
import com.ciobera.fwms.common.model.vo.readonly.FWMSUsersPwdVOImpl;
import com.ciobera.fwms.common.model.vo.readonly.FWMSUsersVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransactionImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 10 10:23:12 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CommonAMImpl extends ApplicationModuleImpl implements CommonAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CommonAMImpl() {
    }

    /**
     * This method is called from the bean method LoginBean.doLogin.
     * This procedure will insert new record for every wrong password attempt in FWMS_USERS_WPWD table and if count>5 it will block the user.
     * @param userId
     * @param pc
     * @return
     */
    public Map logWrongAttempt(String userId, String pc) {
        Map<String, String> resultMap = new HashMap<String, String>();
        DBTransactionImpl dbTransaction = (DBTransactionImpl) getDBTransaction();
        CallableStatement custCtxStmt = null;
        String procedure = "begin " + " FWMS_WPWD_PROC_01('" + userId + "', '" + pc + "'); " + "end;";
        if (userId != null && pc != null) {
            custCtxStmt = dbTransaction.createCallableStatement(procedure, 0);
            try {
                custCtxStmt.execute();
                resultMap.put("RESP_CODE", "SUCCESS");
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (custCtxStmt != null) {
                    try {
                        custCtxStmt.close();
                    } catch (SQLException sqle) {
                        sqle.printStackTrace();
                    }
                }
            }
        }
        return resultMap;
    }

    /**
     * This method is called from the bean method LoginBean.doLogin.
     * This procedure will clear wrong attempts data where user logged correctly into the system.
     * @param userId
     * @param pc
     * @return
     */
    public Map clearWrongAttempt(String userId, String pc) {
        Map<String, String> resultMap = new HashMap<String, String>();
        DBTransactionImpl dbTransaction = (DBTransactionImpl) getDBTransaction();
        CallableStatement custCtxStmt = null;
        String procedure = "begin " + " FWMS_WPWD_PROC_02('" + userId + "', '" + pc + "'); " + "end;";
        if (userId != null && pc != null) {
            custCtxStmt = dbTransaction.createCallableStatement(procedure, 0);
            try {
                custCtxStmt.execute();
                resultMap.put("RESP_CODE", "SUCCESS");
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (custCtxStmt != null) {
                    try {
                        custCtxStmt.close();
                    } catch (SQLException sqle) {
                        sqle.printStackTrace();
                    }
                }
            }
        }
        return resultMap;
    }

    /**
     * This method is called from the bean method LoginBean.doLogin.
     * This procedure will log user activity in Log Table like logging into the system etc.
     * @param userId
     * @param pc
     * @return
     */
    public Map logUserActivity(String userId, String pc, String screen, String type, String logMessage) {
        Map<String, String> resultMap = new HashMap<String, String>();
        DBTransactionImpl dbTransaction = (DBTransactionImpl) getDBTransaction();
        CallableStatement custCtxStmt = null;
        String procedure =
            "begin " + " FWMS_ULOG_PROC_01('" + userId + "', '" + pc + "', '" + screen + "', '" + type + "', '" +
            logMessage + "'); " + "end;";
        if (userId != null && pc != null) {
            custCtxStmt = dbTransaction.createCallableStatement(procedure, 0);
            try {
                custCtxStmt.execute();
                resultMap.put("RESP_CODE", "SUCCESS");
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (custCtxStmt != null) {
                    try {
                        custCtxStmt.close();
                    } catch (SQLException sqle) {
                        sqle.printStackTrace();
                    }
                }
            }
        }
        return resultMap;
    }

    /**
     * Container's getter for FWMSUsers.
     * @return FWMSUsers
     */
    public FWMSUsersVOImpl getFWMSUsers() {
        return (FWMSUsersVOImpl) findViewObject("FWMSUsers");
    }

    /**
     * Container's getter for FWMSUsersPwd.
     * @return FWMSUsersPwd
     */
    public FWMSUsersPwdVOImpl getFWMSUsersPwd() {
        return (FWMSUsersPwdVOImpl) findViewObject("FWMSUsersPwd");
    }

    /**
     * Container's getter for FWMSSeqLogin.
     * @return FWMSSeqLogin
     */
    public FWMSSeqLoginVOImpl getFWMSSeqLogin() {
        return (FWMSSeqLoginVOImpl) findViewObject("FWMSSeqLogin");
    }
}

